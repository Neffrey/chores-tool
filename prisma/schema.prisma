// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

model Account {
    id                       String   @id @default(cuid())
    createdAt                DateTime @default(now())
    updatedAt                DateTime @updatedAt
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?  @db.VarChar(500)
    access_token             String?  @db.VarChar(500)
    refresh_token_expires_in Int?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?  @db.Text
    session_state            String?
    oauth_token_secret       String?
    oauth_token              String?
    user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime
    user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String?
}

model User {
    id            String      @id @default(cuid())
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    name          String?
    email         String?     @unique
    password      String?
    emailVerified DateTime?
    image         String?
    role          String?     @default("user")
    accounts      Account[]
    sessions      Session[]
    ActionLogs    ActionLog[]
    Chores        Chore[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Chore {
    id          String      @id @default(cuid())
    name        String
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    status      ChoreStatus @default(unknown)
    date        DateTime    @default(now()) // If completed then completed date, if not completed then due date
    comment     String?     @db.VarChar(500)
    isDifficult Boolean?    @default(false)
    time        Int?        @default(0) // In minutes
    points      Int?        @default(0)
    ActionLog   ActionLog[]
}

enum ChoreStatus {
    completed
    scheduled
    unknown
}

model ActionLog {
    id      String        @id @default(cuid())
    user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
    chore   Chore?        @relation(fields: [choreId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    choreId String?
    date    DateTime?     @default(now())
    type    ActionLogType @default(added) // added, updated, deleted
}

enum ActionLogType {
    added
    updated
    deleted
}
